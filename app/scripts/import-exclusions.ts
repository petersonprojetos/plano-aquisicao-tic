
import fs from 'fs';
import path from 'path';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface ExclusionData {
  code: string;
  name: string;
  justification: string;
}

async function importExclusions() {
  try {
    console.log('üöÄ Iniciando importa√ß√£o de exclus√µes...');

    // Ler arquivo JSON
    const jsonPath = path.resolve(__dirname, '../../exclusions_data.json');
    const exclusionsData: ExclusionData[] = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));

    console.log(`üìÑ Encontradas ${exclusionsData.length} exclus√µes no arquivo JSON`);

    let imported = 0;
    let skipped = 0;
    let errors = 0;

    // Processar cada exclus√£o
    for (const exclusionData of exclusionsData) {
      try {
        // Verificar se a exclus√£o j√° existe
        const existingExclusion = await prisma.itemExclusion.findUnique({
          where: { code: exclusionData.code }
        });

        if (existingExclusion) {
          console.log(`‚ö†Ô∏è  Exclus√£o ${exclusionData.code} j√° existe - pulando`);
          skipped++;
          continue;
        }

        // Criar a exclus√£o
        const exclusion = await prisma.itemExclusion.create({
          data: {
            code: exclusionData.code,
            name: exclusionData.name,
            justification: exclusionData.justification,
          }
        });

        console.log(`‚úÖ Exclus√£o importada: ${exclusion.code} - ${exclusion.name}`);
        imported++;

      } catch (error) {
        console.error(`‚ùå Erro ao importar exclus√£o ${exclusionData.code}:`, error);
        errors++;
      }
    }

    console.log('\nüìä RESUMO DA IMPORTA√á√ÉO:');
    console.log(`‚úÖ Exclus√µes importadas: ${imported}`);
    console.log(`‚ö†Ô∏è  Exclus√µes puladas (j√° existem): ${skipped}`);
    console.log(`‚ùå Erros: ${errors}`);
    console.log(`üìÑ Total processado: ${exclusionsData.length}`);

  } catch (error) {
    console.error('‚ùå Erro durante a importa√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar importa√ß√£o
importExclusions();
