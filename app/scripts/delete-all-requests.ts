
import { PrismaClient } from '@prisma/client';
import 'dotenv/config';

const prisma = new PrismaClient();

async function deleteAllRequests() {
  try {
    console.log('=== DELETANDO TODAS AS SOLICITA√á√ïES ===\n');
    
    // Primeiro, vamos ver o que ser√° deletado
    const requestsToDelete = await prisma.request.findMany({
      include: {
        user: { select: { name: true, email: true } },
        items: { select: { itemName: true, quantity: true, totalValue: true } },
        department: { select: { name: true } }
      }
    });

    console.log(`üìã ENCONTRADAS ${requestsToDelete.length} SOLICITA√á√ïES PARA DELETAR:\n`);
    
    if (requestsToDelete.length === 0) {
      console.log('‚úÖ Nenhuma solicita√ß√£o encontrada para deletar.');
      return;
    }

    // Mostrar as solicita√ß√µes que ser√£o deletadas
    requestsToDelete.forEach((request, index) => {
      console.log(`   ${index + 1}. ${request.requestNumber} - ${request.requesterName}`);
      console.log(`      - Usu√°rio: ${request.user?.name} (${request.user?.email})`);
      console.log(`      - Departamento: ${request.department?.name}`);
      console.log(`      - Status: ${request.status}`);
      console.log(`      - Valor: R$ ${request.totalValue}`);
      console.log(`      - Itens: ${request.items.length}`);
    });

    console.log('\nüóëÔ∏è INICIANDO DELE√á√ÉO...\n');

    // Deletar em ordem correta devido √†s foreign keys:
    // 1. RequestHistory
    // 2. Notifications 
    // 3. RequestItems
    // 4. Requests

    // 1. Deletar hist√≥rico das solicita√ß√µes
    const historyCount = await prisma.requestHistory.deleteMany({});
    console.log(`‚úÖ Deletados ${historyCount.count} registros de hist√≥rico`);

    // 2. Deletar notifica√ß√µes das solicita√ß√µes
    const notificationsCount = await prisma.notification.deleteMany({});
    console.log(`‚úÖ Deletadas ${notificationsCount.count} notifica√ß√µes`);

    // 3. Deletar itens das solicita√ß√µes
    const itemsCount = await prisma.requestItem.deleteMany({});
    console.log(`‚úÖ Deletados ${itemsCount.count} itens de solicita√ß√µes`);

    // 4. Finalmente, deletar as solicita√ß√µes
    const requestsCount = await prisma.request.deleteMany({});
    console.log(`‚úÖ Deletadas ${requestsCount.count} solicita√ß√µes`);

    console.log('\nüéâ TODAS AS SOLICITA√á√ïES FORAM DELETADAS COM SUCESSO!');
    
    // Verificar se realmente foi tudo deletado
    const remainingRequests = await prisma.request.count();
    console.log(`\nüìä VERIFICA√á√ÉO FINAL: ${remainingRequests} solicita√ß√µes restantes no banco`);

    if (remainingRequests === 0) {
      console.log('‚úÖ Confirmado: Banco limpo de todas as solicita√ß√µes');
    } else {
      console.log('‚ö†Ô∏è Ainda existem solicita√ß√µes no banco - pode ter havido algum erro');
    }

  } catch (error) {
    console.error('‚ùå Erro ao deletar solicita√ß√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

deleteAllRequests();
